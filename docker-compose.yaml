networks:
  order-network:
    driver: bridge
  inventory-network:
    driver: bridge
  payment-network:
    driver: bridge
  product-network:
    driver: bridge

services:
  eureka-server:
    container_name: eureka
    build:
     context: ./discovery
     dockerfile: ../Dockerfile
    ports:
      - "8761:8761"

  order-postgres:
    image: postgres:15-alpine
    container_name: order_postgres_db
    networks:
      - order-network
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd1
      POSTGRES_DB: orderdb
#    ports:
#      - "5432:5432"
    volumes:
      - order_pgdata:/var/lib/postgresql/data

  order-service:
    container_name: order-service
    build:
      context: ./order
      dockerfile: ../Dockerfile
    depends_on:
      - order-postgres
    networks:
      - order-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-postgres:5432/orderdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pwd1
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8080:8080"

  inventory-postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd2
      POSTGRES_DB: inventorydb
    networks:
      - inventory-network
#    ports:
#      - "5432:5432"
    volumes:
      - inventory_pgdata:/var/lib/postgresql/data

  inventory-service:
    container_name: inventory-service
    build:
      context: ./inventory
      dockerfile: ../Dockerfile
    depends_on:
      - inventory-postgres
    networks:
      - inventory-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventory_postgres_db:5432/inventorydb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pwd2
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8180:8080"

  payment-postgres:
    image: postgres:15-alpine
    container_name: payment_postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd3
      POSTGRES_DB: paymentdb
    networks:
      - payment-network
#    ports:
#      - "5432:5432"
    volumes:
      - payment_pgdata:/var/lib/postgresql/data

  payment-service:
    container_name: payment-service
    build:
      context: ./payments
      dockerfile: ../Dockerfile
    depends_on:
      - inventory-postgres
    networks:
      - payment-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://payment-postgres:5432/paymentdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pwd3
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8380:8080"

  mongo_db:
    image: mongo:6.0
    container_name: mongo_db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    ports:
      - "27017:27017"
    networks:
      - product-network
    volumes:
      - mongo_data:/data/db

  product-service:
    container_name: product-service
    build:
      context: ./product
      dockerfile: ../Dockerfile
    depends_on:
      - mongo_db
    networks:
      - product-network
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:mongo@mongo_db:27017/porductdb

    ports:
      - "8280:8080"
volumes:
  order_pgdata:
  inventory_pgdata:
  payment_pgdata:
  mongo_data:


