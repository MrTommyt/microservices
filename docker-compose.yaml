networks:
  global-network:
  order-network:
    driver: bridge
  inventory-network:
    driver: bridge
  payment-network:
    driver: bridge
  product-network:
    driver: bridge
  gateway-redis-network:
    driver: bridge

services:
  discovery-server:
    container_name: discovery
    build:
     context: ./discovery
     dockerfile: ../Dockerfile
    profiles:
      - default
      - order
      - inventory
      - payment
      - product
    ports:
      - "8761:8761"

  order-postgres:
    image: postgres:15-alpine
    container_name: order_postgres_db
    networks:
      - order-network
    profiles:
      - default
      - order
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd1
      POSTGRES_DB: orderdb
#    ports:
#      - "5432:5432"
    volumes:
      - order_pgdata:/var/lib/postgresql/data

  order-service:
    container_name: order-service
    build:
      context: ./order
      dockerfile: ../Dockerfile
    depends_on:
      - order-postgres
      - discovery-server
    profiles:
      - default
      - order
    networks:
      - order-network
      - default
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-postgres:5432/orderdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pwd1
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8080:8080"

  inventory-postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd2
      POSTGRES_DB: inventorydb
    profiles:
      - default
      - inventory
    networks:
      - inventory-network
#    ports:
#      - "5432:5432"
    volumes:
      - inventory_pgdata:/var/lib/postgresql/data

  inventory-service:
    container_name: inventory-service
    build:
      context: ./inventory
      dockerfile: ../Dockerfile
    depends_on:
      - inventory-postgres
      - discovery-server
    profiles:
      - default
      - inventory
    networks:
      - inventory-network
      - default
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventory_postgres_db:5432/inventorydb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pwd2
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8180:8080"

  payment-postgres:
    image: postgres:15-alpine
    container_name: payment_postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd3
      POSTGRES_DB: paymentdb
    networks:
      - payment-network
    profiles:
      - default
      - payment
#    ports:
#      - "5432:5432"
    volumes:
      - payment_pgdata:/var/lib/postgresql/data

  payment-service:
    container_name: payment-service
    build:
      context: ./payments
      dockerfile: ../Dockerfile
    depends_on:
      - inventory-postgres
      - discovery-server
    profiles:
      - default
      - payment
    networks:
      - payment-network
      - default
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://payment-postgres:5432/paymentdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pwd3
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8380:8080"

  mongo_db:
    image: mongo:6.0
    platform: linux/amd64
    container_name: mongo-db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    ports:
      - "27017:27017"
    networks:
      - product-network
    profiles:
      - default
      - product
    volumes:
      - mongo_data:/data/db

  product-service:
    container_name: product-service
    build:
      context: ./product
      dockerfile: ../Dockerfile
    depends_on:
      - mongo_db
      - discovery-server
    profiles:
      - default
      - product
    networks:
      - product-network
      - default
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:mongo@mongo_db:27017/porductdb
    ports:
      - "8280:8080"

  gateway:
    build:
      context: ./gateway
      dockerfile: ../Dockerfile
    container_name: gateway
    ports:
      - "8480:8480"
    depends_on:
      - discovery-server
      - payment-service
      - product-service
      - order-service
      - inventory-service
    profiles:
      - default
    networks:
      - default
      - gateway-redis-network
      - order-network
      - payment-network
      - inventory-network
      - product-network
    environment:
      - SPRING_PROFILES_ACTIVE=default

  redis:
    image: redis:7.2-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    networks:
      - gateway-redis-network
    profiles:
      - default
    volumes:
      - redis_data:/data
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - default
    profiles:
      - default
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - default
    depends_on:
      - prometheus
    profiles:
      - default
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    command: start-dev
    ports:
      - "8081:8080"
    networks:
      - global-network
    profiles:
      - default
      - auth
    volumes:
      - ./data/keycloak:/opt/keycloak/data
    restart: unless-stopped

volumes:
  order_pgdata:
  inventory_pgdata:
  payment_pgdata:
  mongo_data:
  redis_data:


